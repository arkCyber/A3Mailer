name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Dependency audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Upload audit results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json

  # Check for outdated dependencies
  outdated:
    name: Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1
        continue-on-error: true

  # License compliance check
  license:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          cargo license --json > licenses.json
          # Check for GPL licenses (not allowed)
          if grep -q "GPL" licenses.json; then
            echo "GPL licenses found!"
            exit 1
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # Code complexity analysis
  complexity:
    name: Code Complexity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install tokei for code statistics
        run: cargo install tokei

      - name: Generate code statistics
        run: |
          tokei --output json > code-stats.json
          tokei

      - name: Upload code statistics
        uses: actions/upload-artifact@v4
        with:
          name: code-statistics
          path: code-stats.json

  # Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check documentation
        run: |
          cargo doc --workspace --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Check for missing documentation
        run: |
          cargo rustdoc --workspace -- -D missing_docs
        continue-on-error: true

  # Performance regression check
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install criterion
        run: cargo install cargo-criterion

      - name: Run benchmarks
        run: |
          cargo bench --workspace -- --output-format json > benchmark-results.json
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  # MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust MSRV
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.70.0  # Adjust based on your MSRV

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check MSRV compatibility
        run: cargo check --workspace

  # Unused dependencies check
  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-udeps
        run: cargo install cargo-udeps

      - name: Check for unused dependencies
        run: cargo +nightly udeps --workspace
        continue-on-error: true

  # Summary job
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [audit, outdated, license, complexity, docs, msrv]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Audit: ${{ needs.audit.result }}"
          echo "Outdated: ${{ needs.outdated.result }}"
          echo "License: ${{ needs.license.result }}"
          echo "Complexity: ${{ needs.complexity.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          echo "MSRV: ${{ needs.msrv.result }}"
          
          if [[ "${{ needs.audit.result }}" == "failure" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi
          
          if [[ "${{ needs.license.result }}" == "failure" ]]; then
            echo "❌ License check failed"
            exit 1
          fi
          
          if [[ "${{ needs.docs.result }}" == "failure" ]]; then
            echo "❌ Documentation check failed"
            exit 1
          fi
          
          if [[ "${{ needs.msrv.result }}" == "failure" ]]; then
            echo "❌ MSRV check failed"
            exit 1
          fi
          
          echo "✅ All critical quality checks passed"
