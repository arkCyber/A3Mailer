name: Test

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code formatting check
  format:
    name: Check Code Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check

  # Linting with Clippy
  clippy:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Unit tests
  test:
    name: Unit Tests
    needs: [format, clippy]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Run unit tests
        run: cargo test --workspace --lib --bins

  # Integration tests with external dependencies
  integration:
    name: Integration Tests
    needs: [format, clippy]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: a3mailer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Install test dependencies
        run: |
          # Install GLAuth for LDAP testing
          curl -LO https://github.com/glauth/glauth/releases/download/v2.2.0/glauth-linux-amd64
          chmod a+rx glauth-linux-amd64
          nohup ./glauth-linux-amd64 -c tests/resources/ldap.cfg &

          # Install MinIO for S3 testing
          curl -Lo minio.deb https://dl.min.io/server/minio/release/linux-amd64/archive/minio_20230629051228.0.0_amd64.deb
          sudo dpkg -i minio.deb
          mkdir ~/minio
          nohup minio server ~/minio --console-address :9090 &

          # Setup MinIO client
          curl -LO https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod a+rx mc
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          ./mc mb tmp

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Wait for services
        run: |
          timeout 30 bash -c 'until nc -z localhost 5432; do sleep 1; done'
          timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'
          sleep 5

      - name: JMAP Protocol Tests
        run: cargo test -p jmap_proto -- --nocapture

      - name: IMAP Protocol Tests
        run: cargo test -p imap_proto -- --nocapture

      - name: Store Tests
        run: cargo test -p store -- --nocapture

      - name: Directory Tests
        run: cargo test -p tests directory -- --nocapture

      - name: SMTP Tests
        run: cargo test -p tests smtp -- --nocapture

      - name: IMAP Tests
        run: cargo test -p tests imap -- --nocapture

      - name: JMAP Tests
        run: cargo test -p tests jmap -- --nocapture
